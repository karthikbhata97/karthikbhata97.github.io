Main
   0:	b8 c0 07             	mov    ax,0x7c00
   3:	8e d8                	mov    ds,ax
   5:	bb 00 00             	mov    bx,0x0
   8:	b9 00 00             	mov    cx,0x0
   b:	be 16 00             	mov    si,0x16 # 
   e:	e8 0a 01             	call   0x11b
  11:	e8 14 01             	call   0x128
  14:	eb fe                	jmp    0x14

Print:
 11b:	b4 0e 					mov	   ah, 0xe
 11d:   ac          			lodsb
 11e:	3c 00                	cmp    al,0x0
 120:	0f 84 af 00          	je     0x1d3    # ret
 124:	cd 10                	int    0x10
 126:	eb f3                	jmp    0x11b


Read and Store at 0x6f offset to bx (init bx = 0). Read until '\r' or 0x22(34) characters
 128:	b4 01                	mov    ah,0x1
 12a:	cd 16                	int    0x16
 12c:	b4 00                	mov    ah,0x0
 12e:	cd 16                	int    0x16

 130:	a2 6d 00             	mov    ds:0x6d,al
 133:	88 87 6f 00          	mov    BYTE PTR [bx+0x6f],al
 137:	80 3e 6d 00 0d       	cmp    BYTE PTR ds:0x6d,0xd
 13c:	74 09                	je     0x147
 13e:	43                   	inc    bx
 13f:	be 6d 00             	mov    si,0x6d
 142:	e8 d6 ff             	call   0x11b
 145:	eb e1                	jmp    0x128

 147:	b4 0e                	mov    ah,0xe
 149:	b0 0a                	mov    al,0xa
 14b:	cd 10                	int    0x10
 14d:	83 fb 22             	cmp    bx,0x22 # 34 characters
 150:	74 02                	je     0x154
 152:	eb 30                	jmp    0x184


Encrypt: Round 1. Based on string at 0xc9 offset to bx (init bx = 0), shl if flag is '1' else shr by one bit. On 0x22 chars. Save at 0xee offset
 154:	b8 00 00             	mov    ax,0x0
 157:	bb 00 00             	mov    bx,0x0
 15a:	be 6f 00             	mov    si,0x6f

 15d:	b0 31                	mov    al,0x31
 15f:	38 87 c9 00          	cmp    BYTE PTR [bx+0xc9],al
 163:	74 0f                	je     0x174
 165:	ac                   	lods   al,BYTE PTR ds:[si]
 166:	d0 e8                	shr    al,1
 168:	88 87 ee 00          	mov    BYTE PTR [bx+0xee],al
 16c:	43                   	inc    bx
 16d:	83 fb 23             	cmp    bx,0x23
 170:	74 36                	je     0x1a8
 172:	eb e9                	jmp    0x15d

 174:	ac                   	lods   al,BYTE PTR ds:[si]
 175:	d0 e0                	shl    al,1
 177:	88 87 ee 00          	mov    BYTE PTR [bx+0xee],al
 17b:	43                   	inc    bx
 17c:	eb df                	jmp    0x15d

 17e:	be ee 00             	mov    si,0xee
 181:	e8 97 ff             	call   0x11b

Print: NOOOOO
 184:	b4 0e                	mov    ah,0xe
 186:	b0 0d                	mov    al,0xd
 188:	cd 10                	int    0x10
 18a:	be 65 00             	mov    si,0x65
 18d:	e8 8b ff             	call   0x11b
 190:	eb 41                	jmp    0x1d3    # ret

Print: Yeah that's right flag
 192:	b4 0e                	mov    ah,0xe
 194:	b0 0d                	mov    al,0xd
 196:	cd 10                	int    0x10
 198:	b0 0d                	mov    al,0xd
 19a:	cd 10                	int    0x10
 19c:	b0 0a                	mov    al,0xa
 19e:	cd 10                	int    0x10
 1a0:	be 4c 00             	mov    si,0x4c
 1a3:	e8 75 ff             	call   0x11b
 1a6:	eb 2b                	jmp    0x1d3    # ret

Encrypt: Round 2. Xor result from previous round with 0x5 and compare to the string at 0x27 offset reverse order.
 1a8:	bb 00 00             	mov    bx,0x0
 1ab:	be ee 00             	mov    si,0xee

 1ae:	ac                   	lods   al,BYTE PTR ds:[si]
 1af:	3c 00                	cmp    al,0x0
 1b1:	74 0b                	je     0x1be
 1b3:	b4 0e                	mov    ah,0xe
 1b5:	34 05                	xor    al,0x5
 1b7:	88 87 9c 00          	mov    BYTE PTR [bx+0x9c],al
 1bb:	43                   	inc    bx
 1bc:	eb f0                	jmp    0x1ae


 1be:	bb 21 00             	mov    bx,0x21
 1c1:	be 9c 00             	mov    si,0x9c

 1c4:	ac                   	lods   al,BYTE PTR ds:[si]
 1c5:	3a 87 27 00          	cmp    al,BYTE PTR [bx+0x27]
 1c9:	75 b9                	jne    0x184 # wrong
 1cb:	83 fb 00             	cmp    bx,0x0
 1ce:	74 c2                	je     0x192 # right
 1d0:	4b                   	dec    bx
 1d1:	eb f1                	jmp    0x1c4
 1d3:	c3                   	ret    


